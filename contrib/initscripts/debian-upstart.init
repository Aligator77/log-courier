#!/bin/sh
#
### BEGIN INIT INFO
# Provides:          log-courier
# Required-Start:    $remote_fs
# Required-Stop:     $remote_fs
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: Log Courier
# Description:       Sends logs over the network to a log collector
### END INIT INFO

# TODO(driskell): Is this needed?
PATH=/sbin:/usr/sbin:/bin:/usr/bin

. /lib/init/vars.sh
. /lib/lsb/init-functions

NAME=log-courier
DESC="Log Courier"
DAEMON=/usr/sbin/log-courier
PIDFILE=/var/run/${NAME}.pid

# Defaults
LOG_COURIER_ARGS="-config /etc/${NAME}/log-courier.conf"

# Override defaults from default
[ -f "/etc/default/${NAME}" ] && . "/etc/default/${NAME}"

do_start() {
  start-stop-daemon --start --quiet --pidfile "$PIDFILE" --exec /bin/sh --test > /dev/null || return 1
  start-stop-daemon --start --quiet --make-pidfile --background --pidfile "$PIDFILE" --exec "$DAEMON" -- $LOG_COURIER_ARGS || return 2
}

do_stop()
{
  start-stop-daemon --stop --quiet --retry=TERM/30/KILL/5 --pidfile "$PIDFILE"
  RETVAL="$?"
  [ "$RETVAL" = 2 ] && return 2
  start-stop-daemon --stop --quiet --oknodo --retry=0/30/KILL/5 --exec "$DAEMON"
  [ "$?" = 2 ] && return 2
  rm -f "$PIDFILE"
  return "$RETVAL"
}

case "$1" in
  start)
    [ "$VERBOSE" != no ] && log_daemon_msg "Starting ${DESC}" "$NAME"
    do_start
    RC=$?
    case "$RC" in
      0|1) [ "$VERBOSE" != no ] && log_end_msg 0 ;;
      2) [ "$VERBOSE" != no ] && log_end_msg 1 ;;
    esac
    ;;
  stop)
    [ "$VERBOSE" != no ] && log_daemon_msg "Stopping ${DESC}" "$NAME"
    do_stop
    RC=$?
    case "$RC" in
      0|1) [ "$VERBOSE" != no ] && log_end_msg 0 ;;
      2) [ "$VERBOSE" != no ] && log_end_msg 1 ;;
    esac
    ;;
  status)
    status_of_proc "$DAEMON" "$NAME"
    RC=$?
    ;;
  restart|force-reload)
    log_daemon_msg "Restarting ${DESC}" "$NAME"
    do_stop
    RC=$?
    case "$RC" in
      0|1)
        do_start
        RC=$?
        case "$RC" in
          0) log_end_msg 0 ;;
          1) log_end_msg 1 ;; # Old process is still running
          *) log_end_msg 1 ;; # Failed to start
        esac
      ;;
      *)
        # Failed to stop
        log_end_msg 1
      ;;
    esac
    ;;
  *)
    echo "Usage: $0 {start|stop|status|restart|force-reload}" >&2
    exit 3
    ;;
esac

exit $RC
